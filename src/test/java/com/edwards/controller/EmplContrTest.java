package com.edwards.controller;


import com.edwards.model.Empl;
import org.junit.Before;
import org.junit.Test;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;

// SOURCE: https://www.tutorialspoint.com/spring_boot/spring_boot_rest_controller_unit_test.htm


public class EmplContrTest extends AbstractTest {

    @Override
    @Before
    public void setUp() {
        super.setUp();
    }

    @Test
    public void getAllEmpl() throws Exception {
        String uri = "/empl-list";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
        String content = mvcResult.getResponse().getContentAsString();
        Empl[] emplList = super.mapFromJson(content, Empl[].class);
        assertTrue(emplList.length > 0);
    }

    @Test
    public void createEmployee() throws Exception {
        String uri = "/empl-list/empl-new";
        Empl empl = new Empl();
        // id should be autogenerated:
        // empl.setId(2L);
        empl.setName("Sasha");
        empl.setLastName("Edwards");
        empl.setPosition("artist");
        empl.setCreated(null);
        empl.setSalary(15.64);
        String inputJson = super.mapToJson(empl);
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.post(uri)
                .contentType(MediaType.APPLICATION_JSON_VALUE)
                .content(inputJson)).andReturn();

        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
        String content = mvcResult.getResponse().getContentAsString();
        // assertEquals(content, empl);
    }

    @Test
    public void findByID() throws Exception {
        String uri = "/empl-list/2";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
        String content = mvcResult.getResponse().getContentAsString();
        System.out.println(content);
        Empl empl = super.mapFromJson(content, Empl.class);
        System.out.println(empl.getId());
        // assertTrue(((Long) 2L), empl.getId());
    }

    @Test
    public void updateEmpl() throws Exception {
        String uri = "/empl-list/2";
        Empl empl = new Empl();
        empl.setId(12L);
        empl.setName("Natasha");
        empl.setLastName("Ivanova");
        empl.setSalary(45.45);
        empl.setPosition("artist");
        String inputJson = super.mapToJson(empl);
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.put(uri)
                .contentType(MediaType.APPLICATION_JSON_VALUE)
                .content(inputJson)).andReturn();

        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);

        String content = mvcResult.getResponse().getContentAsString();
        assertEquals(content, content);
    }

    @Test
    public void deleteEmpl() throws Exception {
        String uri = "/empl-list/2";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.delete(uri)).andReturn();
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
        String content = mvcResult.getResponse().getContentAsString();
        assertEquals(content, content);
    }
}